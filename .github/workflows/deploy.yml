name: Deploy to AWS Lightsail

on:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      # Build Frontend
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: "20"

      # Cache frontend dependencies
      - name: Cache Frontend Dependencies
        uses: actions/cache@v2
        with:
          path: |
            frontend/node_modules
          key: ${{ runner.os }}-frontend-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-frontend-

      # Cache backend dependencies
      - name: Cache Backend Dependencies
        uses: actions/cache@v2
        with:
          path: |
            backend/node_modules
          key: ${{ runner.os }}-backend-${{ hashFiles('backend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-backend-

      - name: Install & Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Install Backend Dependencies
        run: |
          cd backend
          npm install

      # Deploy to Lightsail
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          # Add newlines if they're missing
          echo -e "${{ secrets.LIGHTSAIL_SSH_KEY }}" > lightsail_key.pem
          chmod 600 lightsail_key.pem
          # Debug SSH connection (remove in production)
          ssh-keygen -y -f lightsail_key.pem

      - name: Deploy to Lightsail
        run: |
          # Debug information
          echo "Testing SSH connection..."
          ssh -v -o StrictHostKeyChecking=no \
              -i lightsail_key.pem \
              ubuntu@${instance_ip} "whoami"

          # Create deployment directory structure
          mkdir -p deploy/frontend deploy/backend

          # Copy frontend build
          cp -r frontend/dist/* deploy/frontend/

          # Copy backend files (excluding node_modules and other unnecessary files)
          cp backend/package*.json deploy/backend/
          cp -r backend/controllers backend/models backend/middleware backend/routes backend/utils deploy/backend/
          cp backend/server.js deploy/backend/
          cp backend/.env.example deploy/backend/

          # Create deploy script
          cat > deploy/deploy.sh << 'EOF'
          #!/bin/bash

          # Stop PM2 processes
          pm2 stop all || true

          # Deploy frontend
          rm -rf /home/ubuntu/apps/frontend/*
          cp -r frontend/* /home/bitnami/apps/frontend/

          # Deploy backend
          cd /home/ubuntu/apps/backend

          # Backup .env if it exists
          if [ -f .env ]; then
            cp .env .env.backup
          fi

          # Remove old files but keep node_modules and .env
          find . -mindepth 1 -maxdepth 1 ! -name 'node_modules' ! -name '.env' ! -name '.env.backup' -exec rm -rf {} +

          # Copy new files
          cp -r ../deploy/backend/* .

          # Restore .env
          if [ -f .env.backup ]; then
            mv .env.backup .env
          fi

          # Install any new dependencies
          npm ci --production

          # Restart PM2
          pm2 restart all --update-env
          EOF

          chmod +x deploy/deploy.sh

          # Upload to Lightsail instance
          instance_ip="${{ secrets.LIGHTSAIL_IP }}"

          # Create remote directory structure
          ssh -o StrictHostKeyChecking=no \
              -i lightsail_key.pem \
              ubuntu@${instance_ip} \
              "mkdir -p /home/ubuntu/apps/deploy"

          # Copy deployment files
          scp -o StrictHostKeyChecking=no \
              -i lightsail_key.pem \
              -r deploy/* \
              ubuntu@${instance_ip}:/home/ubuntu/apps/deploy/

          # Execute deployment
          ssh -o StrictHostKeyChecking=no \
              -i lightsail_key.pem \
              ubuntu@${instance_ip} \
              "cd /home/ubuntu/apps && bash deploy/deploy.sh"

      - name: Cleanup
        run: rm -rf deploy lightsail_key.pem
